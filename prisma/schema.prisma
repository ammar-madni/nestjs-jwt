// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  name                 String             @db.VarChar(255)
  email                String             @unique @db.VarChar(255)
  password             String             @db.VarChar(255)
  prefersImperialUnits Boolean            @default(false)
  emailVerifiedAt      DateTime           @db.Timestamp
  createdAt            DateTime           @db.Timestamp
  updatedAt            DateTime           @db.Timestamp
  exercises            Exercise[]
  workouts             Workout[]
  completedWorkouts    CompletedWorkout[]

  @@map("users")
}

model Exercise {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  description  String?        @db.VarChar(255)
  createdAt    DateTime       @db.Timestamp
  updatedAt    DateTime       @db.Timestamp
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  sets         Set[]
  CompletedSet CompletedSet[]

  @@map("exercises")
}

model Workout {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  description       String?            @db.VarChar(255)
  createdAt         DateTime           @db.Timestamp
  updatedAt         DateTime           @db.Timestamp
  userId            Int
  user              User               @relation(fields: [userId], references: [id])
  sets              Set[]
  completedWorkouts CompletedWorkout[]

  @@map("workouts")
}

model Set {
  id         Int      @id @default(autoincrement())
  reps       Int      @db.Integer
  weight     Int      @db.Integer
  createdAt  DateTime @db.Timestamp
  updatedAt  DateTime @db.Timestamp
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  workoutId  Int
  workout    Workout  @relation(fields: [workoutId], references: [id])

  @@map("sets")
}

model CompletedSet {
  id                 Int              @id @default(autoincrement())
  reps               Int              @db.Integer
  weight             Int              @db.Integer
  createdAt          DateTime         @db.Timestamp
  updatedAt          DateTime         @db.Timestamp
  exerciseId         Int
  exercise           Exercise         @relation(fields: [exerciseId], references: [id])
  completedWorkoutId Int
  completedWorkout   CompletedWorkout @relation(fields: [completedWorkoutId], references: [id])

  @@map("completed_sets")
}

model CompletedWorkout {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @db.Timestamp
  updatedAt     DateTime       @db.Timestamp
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  workoutId     Int
  workout       Workout        @relation(fields: [workoutId], references: [id])
  completedSets CompletedSet[]

  @@map("completed_workouts")
}
